require('./server/Player')
require('./server/Trap')
require('./server/Square')
require('./server/Floor')
require('./server/Spinner')
require('./server/Corner')
require('./server/Arrow')
require('./server/Crossbow')
require('./server/LinearSaw')
require('./server/BlackHole')
require('./server/Tape')

function randomColor()
{
	var color ="#";
	var letters = "0123456789ABCDEF";
	for(var i =0;i<6;i++)
	{
		color += letters[Math.floor(Math.random() * 16)];
	}
	return color;
}

var express = require('express');
var app = express();
var serv = require('http').Server(app);

app.get('/',function(req, res) {
	res.sendFile(__dirname + '/client/index.html');
});
app.use('/client',express.static(__dirname + '/client'));

serv.listen(420);

SOCKET_LIST = {};
CANVAS = {
	width:1850,
	height:800
}
var INTERVAL;
var GAME_SPEED = 15;

SPAWN_POINT = {
	x:200,
	y:500
}
END_POINT = {
	x1:1600,
	y1:450,
	x2:1750,
	y2:550
}

SCORE_BOARD ={};
GRAVITY = 1;
TRAPS = [];
GENERAL_SIZE =50;
GENERAL_TIMER = 0;
SQARE_DENSITY = GENERAL_SIZE;

PLAYERS_CONNECTED =0;
PLAYERS_FINISHED =0;
PLAYERS_PLACED_BLOCKS =0;
CAN_GAME_RUN = false;
GAME_IS_READY = false;
GAME_STATE = "waitForTraps";

function loadMap()
{
	TRAPS.push(new Floor(100,550,7,0,false));
	TRAPS.push(new Floor(100,600,4,90,false));
	TRAPS.push(new Floor(400,600,4,90,false));
	TRAPS.push(new Floor(1350,550,5,90,false));
	TRAPS.push(new Floor(1400,550,9,0,false));
	checkBlockConnections();
}

loadMap();

function checkBlockConnections()
{
	//check connections between blocks
	for(var i in TRAPS)
	{
		TRAPS[i].reset();
		TRAPS[i].glue();
		TRAPS[i].spinnerValidation();

	}
	for(var i in TRAPS)
	{
		TRAPS[i].checkForMover();

	}
	for(var i in TRAPS)
	{
		TRAPS[i].glue();

	}
}

var io = require('socket.io')(serv,{});
io.sockets.on('connection',function(socket){
	
	var random = Math.random();
	socket.player = new Player(random,randomColor());
	SOCKET_LIST[random] = socket;
	socket.on("disconnect",function(){
		delete SCORE_BOARD[socket.player.username];
		delete SOCKET_LIST[socket.player.id];
	})
	socket.on("playerName",function(data){
		socket.player.username = data.name;
		socket.player.skin = data.skin;
		SCORE_BOARD[data.name] = socket.player.points;
	})
	socket.on("playerJump",function(){
		socket.player.jump();
	})
	socket.on("playerMove",function(direction){
		socket.player.move(direction);
	})
		
	//PLAYER DIED OR FINISHED LEVEL
	socket.on("finish",function(data)
	{
		var result = data.result;
		PLAYERS_FINISHED++;
	})
	
	
	//PLAYER HAS SELECTED ITEM ON 2ND CANVAS
	socket.on("builder",function(data){
		var name = data.name;
		var temp;
		if(name=="floor")
		{
			temp = new Floor(data.x,data.y,4,data.rotation);
		}
		if(name=="linear_saw" || name=="linear_saw_blade")
		{
			temp = new LinearSaw(data.x,data.y,null,data.rotation);
		}
		if(name=="spinner")
		{
			temp = new Spinner(data.x,data.y);
		}
		if(name=="corner")
		{
			temp = new Corner(data.x,data.y,data.rotation);
		}
		if(name=="crossbow")
		{
			temp = new Crossbow(data.x,data.y,1,data.rotation);
		}
		if(name=="bomb")
		{
			temp = new Floor(data.x,data.y,1,data.rotation);
			temp.squares[0].name="bomb";
		}
		if(name=="blackhole")
		{
			temp = new BlackHole(data.x,data.y,1,data.rotation);
		}
		if(name=="tape")
		{
			temp = new Tape(data.x,data.y,1,data.rotation);
		}
		temp.blockName = name;
		socket.emit("drawBuilder",temp);
	})

	//PLAYER CLICKED WITH ITEM ON 1ST CANVAS
	socket.on("placeBlock",function(data){
		var x = data.x;
		var y = data.y;
		var canPlace = true;
		var name = data.blockName;
		
		//DOES THE ITEM COLLIDE WITH ALREADY EXISTING ITEMS
		for(var z in data.squares)
		{
			var sqx = data.squares[z].x;
			var sqy = data.squares[z].y;
			for(var i in TRAPS)
			{
				for(var g in TRAPS[i].squares)
				{
					if(TRAPS[i].squares[g].x == sqx && TRAPS[i].squares[g].y == sqy)
					{
						canPlace=false;
						if(name=="bomb")
						{
							
							//PLAYER destroyed a block
							
							var index = TRAPS.length - 1;
							TRAPS[index].index = index;

							TRAPS.splice(i,1);
							socket.emit("buildSuccess");
							checkBlockConnections();
							
							PLAYERS_PLACED_BLOCKS++;
							break;
						}
					}
				}
			}
		}
		
		if(canPlace)
		{
			if(name=="floor")
			{
				TRAPS.push(new Floor(x,y,data.size,data.rotation));
			}
			if(name=="linear_saw" || name=="linear_saw_blade")
			{
				TRAPS.push(new LinearSaw(x,y,null,data.rotation));
			}
			if(name=="spinner")
			{
				TRAPS.push(new Spinner(x,y));
			}
			if(name=="corner")
			{
				TRAPS.push(new Corner(x,y,data.rotation));
			}
			if(name=="crossbow")
			{
				TRAPS.push(new Crossbow(x,y,data.size,data.rotation));
			}
			if(name=="bomb")
			{
				//do nothing, it's a freaking bomb, maybe some animation later on
				PLAYERS_PLACED_BLOCKS++;
				socket.emit("buildSuccess");
				return;
			}
			if(name=="blackhole")
			{
				TRAPS.push(new BlackHole(x,y,data.size,data.rotation));
			}
			if(name=="tape")
			{
				TRAPS.push(new Tape(x,y,data.size,data.rotation));
			}
			var index = TRAPS.length - 1;
			TRAPS[index].index = index;
			//BLOCK PLACED
			PLAYERS_PLACED_BLOCKS++;
			checkBlockConnections();
			socket.emit("buildSuccess");
			
		}
	})
})

function update()
{
	
	
	var count =0;
	for(var i in SCORE_BOARD)
	{
		count++;
	}
	// console.log("PC: "+PLAYERS_CONNECTED)
	// console.log("PF: "+PLAYERS_FINISHED)
	// console.log("PPC: "+PLAYERS_PLACED_BLOCKS)
	PLAYERS_CONNECTED = count;

	//wait for players to place traps
	if(!GAME_IS_READY)
	{
		if(PLAYERS_CONNECTED==PLAYERS_PLACED_BLOCKS)
		{
			checkBlockConnections();
			GAME_IS_READY=true;
			PLAYERS_PLACED_BLOCKS=0;
			GENERAL_TIMER=0;

			GAME_STATE="waitForFinish";
			for(var i in SOCKET_LIST)
			{
				SOCKET_LIST[i].emit("blocksPlaced")
			}
		}
	}
	else //when all players finish or die
	{
		if(PLAYERS_CONNECTED==PLAYERS_FINISHED)
		{
			setTimeout(function(){
				
				//RESET PLAYERS
				for(var i in SOCKET_LIST)
				{
					SOCKET_LIST[i].player.finished = false;
					SOCKET_LIST[i].player.killed = false;
					SOCKET_LIST[i].player.state = "idle";
					SOCKET_LIST[i].player.x = SPAWN_POINT.x;
					SOCKET_LIST[i].player.y = SPAWN_POINT.y;
					SOCKET_LIST[i].player.speedX = 0;
					SOCKET_LIST[i].player.speedY = 0;
					SOCKET_LIST[i].emit("playersFinished");
				}
				
				GAME_STATE = "waitForTraps"
				GAME_IS_READY=false;
				PLAYERS_FINISHED=0;
				//reset traps  and DELETE PROJECTILES
				for(var i=0;i<TRAPS.length;i++)
				{
					TRAPS[i].reset();
					
					if(TRAPS[i] instanceof Arrow)
					{
						TRAPS.splice(i,1);
						i--;
					}
				}
				GENERAL_TIMER=0;
				
			
			
			},1000) //give it some time to show what happened
		}
	}
	
	if(GENERAL_TIMER>=360)GENERAL_TIMER=0;
	if(GAME_IS_READY)GENERAL_TIMER+=2;
	
	
	var pack = {
		players:[],
		traps:TRAPS,
		state:GAME_STATE,
		score:SCORE_BOARD,
		timer360:GENERAL_TIMER
	};
	//UPDATE TRAPS
	for(var g=0;g<TRAPS.length;g++)
	{
		if(GAME_IS_READY)
		{
			TRAPS[g].update();
			TRAPS[g].index = g;
		}
	}
	//DELETE BROKEN STUFF LIKE ARROWS
	for(var g=0;g<TRAPS.length;g++)
	{
		if(GAME_IS_READY)
		{
			if(TRAPS[g] instanceof Arrow)
			{
				if(TRAPS[g].isDestroyed)
				{
					TRAPS.splice(g,1);
					g--;
				}
			}
		}
	}
	
	//UPDATE PLAYERS
	for(var i in SOCKET_LIST)
	{
		var socket = SOCKET_LIST[i];
		if(GAME_IS_READY)
		{
			
			socket.player.update();
			
		}
		pack.players.push(socket.player)
	}
	for(var i in SOCKET_LIST)
	{
		var socket = SOCKET_LIST[i];
		socket.emit("gameData",pack);
	}
} 
INTERVAL = setInterval(update,GAME_SPEED);


