require('./server/Player')
require('./server/Trap')
require('./server/Square')
require('./server/Floor')
require('./server/Spinner')

function randomColor()
{
	var color ="#";
	var letters = "0123456789ABCDEF";
	for(var i =0;i<6;i++)
	{
		color += letters[Math.floor(Math.random() * 16)];
	}
	return color;
}

var express = require('express');
var app = express();
var serv = require('http').Server(app);

app.get('/',function(req, res) {
	res.sendFile(__dirname + '/client/index.html');
});
app.use('/client',express.static(__dirname + '/client'));

serv.listen(420);

SOCKET_LIST = {};
var CANVAS = {
	width:800,
	height:600
}
var INTERVAL;
var GAME_SPEED = 15;

GRAVITY = 1;
TRAPS = [];
GENERAL_SIZE =50;
GENERAL_TIMER = 0;
SQARE_DENSITY = GENERAL_SIZE;

PLAYERS_CONNECTED =0;
PLAYERS_FINISHED =0;
PLAYERS_PLACED_BLOCKS =0;
CAN_GAME_RUN = false;

function loadMap()
{
	TRAPS.push(new Spinner(200,250));
	TRAPS.push(new Floor(200,50,4,90));
	TRAPS.push(new Floor(250,250,4,0));
	TRAPS.push(new Floor(0,250,4,0));
	TRAPS.push(new Floor(200,300,4,90));
	checkBlockConnections();
}



function checkBlockConnections()
{
	//check connections between blocks
	for(var i in TRAPS)
	{
		TRAPS[i].checkForMover();
	}
}

var io = require('socket.io')(serv,{});
io.sockets.on('connection',function(socket){
	PLAYERS_CONNECTED++;
	var random = Math.random();
	socket.player = new Player(random,randomColor());
	SOCKET_LIST[random] = socket;
	socket.on("disconnect",function(){
		delete SOCKET_LIST[socket.player.id];
		PLAYERS_CONNECTED--;
	})
	socket.on("playerJump",function(){
		socket.player.jump();
	})
	socket.on("playerMove",function(direction){
		socket.player.move(direction);
	})
	socket.on("builder",function(data){
		var name = data.name;
		var temp;
		if(name=="floor")
		{
			temp = new Floor(data.x,data.y,4,data.rotation);
		}
		if(name=="spinner")
		{
			temp = new Spinner(data.x,data.y);
		}
		temp.blockName = name;
		socket.emit("drawBuilder",temp);
	})
	socket.on("finish",function(data)
	{
		var result = data.result;
		PLAYERS_FINISHED++;
	})
	socket.on("placeBlock",function(data){
		var x = data.x;
		var y = data.y;
		var canPlace = true;
		var name = data.blockName;
		for(var i in TRAPS)
		{
			for(var g in TRAPS[i].squares)
			{
				if(TRAPS[i].squares[g].x == x && TRAPS[i].squares[g].y == y)canPlace=false;
			}
		}
		if(canPlace)
		{
			if(name=="floor")
			{
				TRAPS.push(new Floor(x,y,data.size,data.rotation));
			}
			if(name=="spinner")
			{
				TRAPS.push(new Spinner(x,y));
			}
			PLAYERS_PLACED_BLOCKS++;
			checkBlockConnections();
		}
	})
})

function update()
{
	if(PLAYERS_FINISHED==PLAYERS_CONNECTED)
	{
		PLAYERS_PLACED_BLOCKS=0;
		PLAYERS_FINISHED=0;
	}
	if(GENERAL_TIMER>=360)GENERAL_TIMER=0;
	GENERAL_TIMER+=1;
	var pack = {
		players:[],
		traps:TRAPS
	};
	for(var g=0;g<TRAPS.length;g++)
	{
		if(CAN_GAME_RUN)
		{
			TRAPS[g].update();
		}
	}
	
	for(var i in SOCKET_LIST)
	{
		var socket = SOCKET_LIST[i];
		if(CAN_GAME_RUN)socket.player.update();
		pack.players.push(socket.player)
	}
	for(var i in SOCKET_LIST)
	{
		var socket = SOCKET_LIST[i];
		socket.emit("gameData",pack);
	}
} 
PLAYERS_FINISHED=PLAYERS_CONNECTED;
INTERVAL = setInterval(update,GAME_SPEED);


