Square = class
{
	constructor(x,y,color)
	{
		this.x = x;
		this.y = y;
		this.size = GENERAL_SIZE;
		this.centerX = this.x + this.size/2;
		this.centerY = this.y + this.size/2;
		this.initialX = this.x;
		this.initialY = this.y;
		this.initialDistanceFromSpinner =0;
		this.color = color;
		this.rotation =0;
		this.spinner;
		this.angleDelta=0;
		this.update();
	}
	collision(id)
	{
		var player = SOCKET_LIST[id].player;
		this.centerX = this.x+this.size/2;
		this.centerY = this.y+this.size/2;
		
		var vectorX = this.centerX- player.centerX;
		var vectorY = this.centerY- player.centerY;
		
		//collision detection
		if(vectorX*vectorX < GENERAL_SIZE*GENERAL_SIZE && vectorY*vectorY<GENERAL_SIZE*GENERAL_SIZE)
		{
			
			if(vectorX*vectorX>vectorY*vectorY)
			{
				//col on x axis
				if(vectorX>0)
				{
					//player->square
					player.speedX = 0;
					player.x = this.x - player.width;
					player.canJump = true;
				}
				else
				{
					//square<-player
					player.speedX = 0;
					player.x = this.x + this.size;
					player.canJump = true;
				}
			}
			else 
			{
				//col on y axis
				if(vectorY>0)
				{
					//player
					//square
					player.speedY=0;
					player.y = this.y - player.height;
					player.inAir = false;
					player.canJump = true;
					return true;
				}
				else
				{
					//square
					//player
					player.speedY=0;
					player.y = this.y + this.size;
				}
			}
			
		}
		return false;
	}
	
	collideWithElement(element)
	{
		var vectorX = this.centerX - element.centerX;
		var vectorY = this.centerY - element.centerY;
		var dist = Math.sqrt(vectorX*vectorX + vectorY*vectorY);
		if(dist==GENERAL_SIZE)return true;
		else return false;
	}
	
	update()
	{
		if(this.spinner)
		{
			if(this.spinner.rotation>=2*Math.PI)
			{
				this.x = this.initialX;
				this.y = this.initialY;
			}
			this.rotation=this.spinner.rotation;
			var centerX = this.spinner.x;
			var centerY = this.spinner.y;
			var dist =  this.initialDistanceFromSpinner;
			var deltaX = -Math.cos(this.rotation+this.angleDelta)*dist;
			var deltaY = -Math.sin(this.rotation+this.angleDelta)*dist;
			this.x = Math.floor(centerX - deltaX);
			this.y = Math.floor(centerY - deltaY);
			console.log(this.x,this.y)
		}
		
	}
}
