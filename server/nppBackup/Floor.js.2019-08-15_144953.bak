Floor = class extends Trap
{
	
	constructor(x,y,size)
	{
		super(x,y);
		this.size = size;
		this.squares = [];
		for(var i =0;i<this.size;i++)
		{
			this.squares.push(new Square(this.x+(SQARE_DENSITY)*i,this.y,"#00FF00"));
		}
		
	}
	collision(player)
	{	
		var didLand = false;
		for(var i=0;i<this.squares.length;i++)
		{	
			var result = this.squares[i].collision(player);
			if(result)didLand = true;
		}
		return didLand;
	}
	update()
	{
		for(var i in this.squares)
		{
			this.squares[i].update();
		}
	
	}	
	joinSpinner(spinner)
	{

		if(this.y>spinner.y)
		{
			this.squares[0].angleDelta = Math.PI/2;
		}
		if(this.x > spinner.x)
		{
			this.squares[0].angleDelta = 0;
		}
		if(this.y < spinner.y)
		{
			this.squares[0].angleDelta = -Math.PI/2;
		}
		if(this.x < spinner.x)
		{
			this.squares[0].angleDelta = Math.PI;
		}
		for(var i=0;i<this.squares.length;i++)
		{
			this.squares[i].spinner = spinner;
			
			var deltaX = this.squares[i].x - this.squares[i].spinner.x;
			var deltaY = this.squares[i].y - this.squares[i].spinner.y;
			this.squares[i].initialDistanceFromSpinner = Math.sqrt(Math.pow(deltaX,2)+Math.pow(deltaY,2));
			this.squares[i].angleDelta = Math.atan2(deltaY,deltaX);
		}
	}
	checkForMover()
	{
		for(var i in TRAPS)
		{
			if(TRAPS[i] instanceof Spinner && this.spinner==0)
			{
				console.log(1)
				for(var g in this.squares)
				{
					if(this.squares[g].collideWithElement(TRAPS[i]))
					{
						this.spinner = TRAPS[i];
					}
				}
				
			}
		}
	}
}