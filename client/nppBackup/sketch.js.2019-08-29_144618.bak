var socket = io();

var ITEM_CHOSEN="empty";
var ITEM_ROTATION = 0;
var ITEM_X=0;
var ITEM_Y=0;
var GENERAL_SIZE=50;
var GAME_STATE = "";
var CURRENT_CANVAS;
var PLAYERS_CONNECTED =0;
var ITEM_MAP = {};
var canvas = document.getElementById("gameArea");
var itemCanvas = document.getElementById("itemShop");
var mainContext = canvas.getContext("2d");
var TEMP_BLOCK;
var CROSSBOW_SPRITE =[];
var CROSSBOW_FRAME=0;
var pressedKeys={
	w:false,
	a:false,
	s:false
}

const MAP_BACKGROUD = new Image(canvas.width,canvas.height);
MAP_BACKGROUD.src = './client/map_rooftops/background.png';
const MAP_ELEMENTS = new Image(canvas.width,canvas.height);
MAP_ELEMENTS.src = './client/map_rooftops/elements.png';

const WOOD_BLOCK = new Image(50, 50);
WOOD_BLOCK.src = './client/wood.png';
const METAL_BLOCK = new Image(50, 50);
METAL_BLOCK.src = './client/metal.png';
const SPINNER_BLOCK = new Image(50, 50);
SPINNER_BLOCK.src = './client/spinner.png';

for(var i=1;i<=57;i++)
{
	const CROSSBOW_BLOCK = new Image(50, 50);
	CROSSBOW_BLOCK.src = './client/crossbow/crossbow'+i+'.png';
	CROSSBOW_SPRITE.push(CROSSBOW_BLOCK);
}

const ARROW_BLOCK = new Image(50, 50);
ARROW_BLOCK.src = './client/crossbow/arrow.png';

const BOMB_BLOCK = new Image(50, 50);
BOMB_BLOCK.src = './client/bomb.png';

function placeItemOnMap(x,y,width,height,item)
{
	//assign specific item to coords
	var x1 = x;
	var x2 = x+width;
	var y1 = y;
	var y2 = y +height;
	for(var i =x1;i<x2;i+=GENERAL_SIZE)
	{
		for(var g=y1;g<y2;g+=GENERAL_SIZE)
		{
			ITEM_MAP[g][i]=item;
		}
	}
	
}


function initializeMapItem()
{
	//assign EMPTY to every field
	for(var i =0;i<itemCanvas.height;i+=GENERAL_SIZE)
	{
		var row = {};
		for(var g =0;g<itemCanvas.width;g+=GENERAL_SIZE)
		{
			row[g] = "empty";
		}
		ITEM_MAP[i] = row;
	}
}

function initializeThings()
{
	initializeMapItem();
	
	//item shop drawings and assigning coords to items
	placeItemOnMap(50,50,200,50,"floor");
	placeItemOnMap(300,50,50,50,"spinner");
	placeItemOnMap(400,50,200,50,"corner");
	placeItemOnMap(550,50,50,200,"corner");
	placeItemOnMap(650,50,50,50,"crossbow");
	placeItemOnMap(50,150,50,50,"bomb");
	
	//draw the item shop just once
	drawItemMap();
}
initializeThings();

function drawImage(ctx, image, x, y, w, h, degrees){
  ctx.save();
  ctx.translate(x+w/2, y+h/2);
  ctx.rotate(degrees*Math.PI/180.0);
  ctx.translate(-x-w/2, -y-h/2);
  ctx.drawImage(image, x, y, w, h);
  ctx.restore();
}


function drawSingleBlock(context,name,x,y,rotation)
{
	if(name=="empty")return;
	var image;
	if(name=="floor")
	{
		image = WOOD_BLOCK;
	}
	if(name=="spinner")
	{
		image = SPINNER_BLOCK;
	}	
	if(name=="corner")
	{
		image = METAL_BLOCK;
	}
	if(name=="crossbow")
	{
		image = CROSSBOW_SPRITE[CROSSBOW_FRAME];
	}
	if(name=="arrow")
	{
		image = ARROW_BLOCK;
	}
	if(name=="bomb")
	{
		image = BOMB_BLOCK;
	}
	drawImage(context,image,x,y,GENERAL_SIZE,GENERAL_SIZE,rotation);
}


function drawTheMap(z)
{
	if(z==0)mainContext.drawImage(MAP_BACKGROUD,0,0);
	else if(z==1)mainContext.drawImage(MAP_ELEMENTS,0,0);
}


function drawItemMap()
{
	//for now just rectangles, later graphics, although coords assignation must remain the same
	var ctx = itemCanvas.getContext("2d");
	for(var y =0;y<itemCanvas.height;y+=GENERAL_SIZE)
	{
		for(var x =0;x<itemCanvas.width;x+=GENERAL_SIZE)
		{
			var item = ITEM_MAP[y][x];
			drawSingleBlock(ctx,item,x,y);
			
		}
	}
}

function refreshHUD()
{
	document.getElementById("gameState").innerHTML = GAME_STATE;
	document.getElementById("playerCount").innerHTML = "Players: "+ PLAYERS_CONNECTED;
	
}


socket.on("gameData",function(data){
	mainContext.clearRect(0,0,canvas.width,canvas.height);
	//graphics do not load
	drawItemMap();
	
	GAME_STATE = data.state;
	PLAYERS_CONNECTED = data.players.length;
	
	//display game status
	refreshHUD();
		
	if(GAME_STATE=="waitForTraps")itemCanvas.style.display = "initial";
	else itemCanvas.style.display = "none";
	
	
	if(pressedKeys.a)socket.emit("playerMove","L");
	if(pressedKeys.d)socket.emit("playerMove","R");
	if(pressedKeys.w)socket.emit("playerJump");
	
	//DRAW THE MAP BACKGROUND BEFORE THE REST
	drawTheMap(0);
	
	//DRAW THE PLAYERS
	for(var i =0;i<data.players.length;i++)
	{
		mainContext.fillStyle=data.players[i].color;
		mainContext.fillRect(data.players[i].x,data.players[i].y,data.players[i].width,data.players[i].height);
	}
	//DRAW EVERY TRAP SQUARE
	for(var g =0;g<data.traps.length;g++)
	{
		if(data.traps[g].squares[0].name=="crossbow")
		{
			CROSSBOW_FRAME = Math.floor(data.traps[g].reload * CROSSBOW_SPRITE.length/100);
		}
		for(var z=0;z<data.traps[g].squares.length;z++)
		{
			var square = data.traps[g].squares[z];
			
			drawSingleBlock(mainContext,square.name,square.x,square.y,square.angle);
		}
	}
	
	//DRAW TEMPORARY ITEM PLACE
	if(TEMP_BLOCK!=undefined && ITEM_CHOSEN!="empty")
	{
		for(var i in TEMP_BLOCK.squares)
		{
			mainContext.fillStyle = TEMP_BLOCK.squares[i].color;
			var square = TEMP_BLOCK.squares[i];
			
			drawSingleBlock(mainContext,square.name,square.x,square.y,square.angle);
		}
	}
	//DRAW THE REST OF THE MAP TO COVER STUFF
	drawTheMap(1);
	
	//GET THE ITEM"S POSITION FROM SERVER (easier that way)
	if(ITEM_CHOSEN!="empty")
	{
		ITEM_PLACING_DATA = {
			x:ITEM_X,
			y:ITEM_Y,
			rotation:ITEM_ROTATION,
			name:ITEM_CHOSEN
		}
		socket.emit("builder",ITEM_PLACING_DATA);
	}
})

//JUST RESPONSE FROM THIS GUY ABOVE ^^
socket.on("drawBuilder",function(data){
	TEMP_BLOCK = data;
})


onmousemove = function(event)
{
	ITEM_X = event.layerX- event.layerX%GENERAL_SIZE;
	ITEM_Y = event.layerY- event.layerY%GENERAL_SIZE;
	CURRENT_CANVAS = event.path[0].id;
}

onmousedown = function(event)
{
	if(CURRENT_CANVAS=="itemShop")
	{
		if(GAME_STATE!="waitForTraps")return;
		ITEM_CHOSEN = ITEM_MAP[ITEM_Y][ITEM_X];
		if(ITEM_CHOSEN=="empty") TEMP_BLOCK = undefined;
	}
	if(CURRENT_CANVAS=="gameArea")
	{
		if(ITEM_CHOSEN!="empty")
		{
			TEMP_BLOCK.rotation = ITEM_ROTATION;
			socket.emit("placeBlock",TEMP_BLOCK);
			TEMP_BLOCK=undefined;
			ITEM_CHOSEN="empty";
		}
	}
}

onkeypress = function(event)
{
	var key = event.key.toLowerCase();
	if(key=="r")
	{
		ITEM_ROTATION+=90;
		if(ITEM_ROTATION==360)ITEM_ROTATION=0;
	}
	if(key=="w")
	{
		pressedKeys.w = true;
	}
	if(key=="a")
	{
		pressedKeys.a = true;
	}
	if(key=="d")
	{
		pressedKeys.d = true;
	}
}
onkeyup = function(event)
{
	var key = event.key.toLowerCase();
	if(key=="a")
	{
		pressedKeys.a = false;
	}
	if(key=="d")
	{
		pressedKeys.d = false;
	}
	if(key=="w")
	{
		pressedKeys.w = false;
	}
}